lpg_PstI <- insilico.digest(lpg, cs_5p1, cs_3p1, verbose=TRUE)
F_PstI <- size.select(lpg_PstI, min.size = 100, max.size = 1000, graph=TRUE, verbose=TRUE)
#BamHI
cs_5p1 <- "G"
cs_3p1 <- "GATCC"
lpg_BamHI <- insilico.digest(lpg, cs_5p1, cs_3p1, verbose=TRUE)
F_BamHI <- size.select(lpg_BamHI, min.size = 100, max.size = 1000, graph=TRUE, verbose=TRUE)
#NdeI
cs_5p1 <- "CA"
cs_3p1 <- "TATG"
lpg_NdeI <- insilico.digest(lpg, cs_5p1, cs_3p1, verbose=TRUE)
F_NdeI <- size.select(lpg_NdeI, min.size = 100, max.size = 1000, graph=TRUE, verbose=TRUE)
#double digest
#PstI
cs_5p1 <- "CTGCA"
cs_3p1 <- "G"
#MspI
cs_5p2 <- "C"
cs_3p2 <- "CGG"
lpg_DD <- insilico.digest(lpg, cs_5p1, cs_3p1, cs_5p1, cs_3p1, verbose=TRUE)
lpg_DD2 <- adapt.select(lpg_DD, type = "AB+BA", cs_5p1, cs_3p1, cs_5p1, cs_3p1)
F_DD <- size.select(lpg_DD2, min.size = 100, max.size = 1000, graph=TRUE, verbose=TRUE)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)")
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=2)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=3)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=10)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=1)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=0.5)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=0.25)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=0.05)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=0.005)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=0.0005)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=-1)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE,
range=1/2)
boxplot(list(width(lpg_ApeKI), width(lpg_PstI), width(lpg_BamHI),
width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI),
width(lpg_NdeI), width(lpg_DD)),
names=c("ApeKI","PstI", "BamHI", "HinP1I", "HpaII/MspI",
"MseI","NdeI", "PstI-MspI"),
ylab="Locus size (bp)",
outline=FALSE)
boxplot(list(width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI)),
names=c("HinP1I", "HpaII/MspI","MseI"),
ylab="Locus size (bp)",
outline=TRUE)
boxplot(list(width(lpg_HinP1I), width(lpg_HpaII), width(lpg_MseI)),
names=c("HinP1I", "HpaII/MspI","MseI"),
ylab="Locus size (bp)",
outline=FALSE)
?SimRAD
?BOD
data(BOD)
head(BOD)
plot(BOD$Time, BOD$demand)
plot(BOD$Time, BOD$demand, ylim = c(0,30))
mod=lm(BOD$demand~BOD$Time)
lm.line = function(x,y){}
lm.line = function(x,y){lines(x,fitted(lm(y~x)))}
View(lm.line)
lm.line(BOD$demand, BOD$Time)
prd=predict(mod, newdata = data.frame(x=new.x),
interval = c("confidence"), level = 0.95,
type = "response"
)
new.x=BOD$Time
prd=predict(mod, newdata = data.frame(x=new.x),
interval = c("confidence"), level = 0.95,
type = "response"
)
lines(new.x, prd[,2], lty=2, lwd=2)
lines(new.x, prd[,3], lty=2, lwd=2)
View(lm.line)
lm.line(BOD$demand, BOD$Time)
View(lm.line)
View(lm.line)
function(x,y){lines(x,fitted(lm(y~x)))}
lm.line = function(x,y){lines(x,fitted(lm(y~x)))}
lm.line(BOD$demand, BOD$Time)
lines(BOD$Time,fitted(lm(BOD$demand~BOD$Time)))
new.x2=seq(min(BOD$Time), max(BOD$Time))
prd=predict(mod, newdata = data.frame(x=new.x2),
interval = c("confidence"), level = 0.95,
type = "response"
)
new.x2=seq(min(BOD$Time), max(BOD$Time))
prd=predict(mod, newdata = data.frame(x=new.x2),
interval = c("confidence"), level = 0.95,
type = "response"
)
?predict.lm
mod
summary(mod)
mod$fitted.values
mod$terms
prd=predict(mod, newdata = data.frame(x=new.x2),
interval = c("confidence"), level = 0.95,
type = "response"
)
data()
data("CO2")
prd2=predict(mod, newdata = data.frame(x=BOD$Time),
interval = c("confidence"), level = 0.95,
type = "response"
)
View(prd)
View(prd2)
install.packages("C:/Users/PB-ARNEL/Downloads/ldDesign_2.0-1.tar.gz", repos = NULL, type = "source")
library(ldDesign)
options(width=65, digits=3)
cc.power(B=1e6, OR=2.0, Dprime=0.5, p=0.3, q=0.1, prevalence=0.1,
n.cases=2000, n.controls=3000, model="additive", a=1)
cc.power(B=1e6, OR=2.0, Dprime=1, p=0.3, q=0.1, prevalence=0.1,
n.cases=2000, n.controls=3000, model="additive", a=1)
cc.power(B=1e6, OR=2.0, Dprime=0.5, p=0.3, q=0.1, prevalence=0.1,
n.cases=2000, n.controls=3000, model ="dominant", a=1)
?cc.design
cc.design(B=1e6, OR=2.0, D=D, p=0.3, q=0.1, prevalence=0.1,
n.cases=2000, n.controls=3000, model="additive",
power=0.8, a=1)
options(width=65)
r.squared <- 0.25
p <- 0.3
q <- 0.1
D <- sqrt(r.squared*p*(1-p)*q*(1-q))
cc.design(B=1e6, OR=2.0, D=D, p=0.3, q=0.1, prevalence=0.1,
n.cases=2000, n.controls=3000, model="additive",
power=0.8, a=1)
cc.design(B=1e6, OR=2.0, D=D, p=0.3, q=0.1, prevalence=0.1,
n.cases=22, n.controls=68, model="additive",
power=0.8, a=1)
cc.design(B=1e6, OR=2.0, D=D, p=0.3, q=0.1, prevalence=0.1,
n.cases=22, n.controls=68, model="additive",
power=0.8, a=1)
D
r.squared <- 0.5
D <- sqrt(r.squared*p*(1-p)*q*(1-q))
D
cc.design(B=1e6, OR=2.0, D=D, p=0.3, q=0.1, prevalence=0.1,
n.cases=22, n.controls=68, model="additive",
power=0.8, a=1)
library(UsingR)
boxplot(exec.pay)
boxplot(exec.pay, ylim=c(0,400))
head(InsectSprays)
boxplot(split(InsectSprays$count, InsectSprays$spray))
library(dplyr)
data(nym.2002, package="UsingR")
str(nym.2002)
boxplot(split(nym.2002$time, nym.2002$gender))
aggregate(nym.2002$time, nym.2002$gender, median)
aggregate(nym.2002$time, by=list(nym.2002$gender), median)
data("father.son")
x=father.son$fheight
y=father.son$sheight
plot(x,y,xlab="Father's height in inches",ylab="Son's height in inches",main=paste("correlation =",signif(cor(x,y),2)))
groups <- split(y,round(x))
boxplot(groups)
print(mean(y[ round(x) == 72]))
groups <- split(y,round(x))
mypar2(2,2)
mpar(2,2)
mfpar(2,2)
for(i in c(5,8,11,14)){
qqnorm(groups[[i]],main=paste0("X=",names(groups)[i]," strata"),
ylim=range(y),xlim=c(-2.5,2.5))
qqline(groups[[i]])
}
if (!("devtools" %in% installed.packages())){install.packages(devtools)}
library(devtools)
if (!("qvalue" %in% installed.packages())){TODO}
devtools::install_github("whitlock/OutFLANK")
if (!("qvalue" %in% installed.packages())){TODO}
if (!("vcfR" %in% installed.packages())){install.packages("vcfR")}
devtools::install_github("whitlock/OutFLANK")
install.packages('qvalue')
devtools::install_github("whitlock/OutFLANK")
if (!("qvalue" %in% installed.packages())){install.packages("qvalue")}
devtools::install_github("whitlock/OutFLANK")
source("https://bioconductor.org/biocLite.R")
biocLite("qvalue")
devtools::install_github("whitlock/OutFLANK")
library(OutFLANK)  # outflank package
library(vcfR)
data("sim1a")
str(sim1a)
summary(sim1a)
levels(sim1a$G)
str(sim1a$G)
table(sim1a$pop)
table(sim1a$G)
my_fst <- MakeDiploidFSTMat(t(sim1a$G), locusNames = sim1a$position, popNames = sim1a$pop)
head(my_fst)
plot(my_fst$He, my_fst$FST)
plot(my_fst$FST, my_fst$FSTNoCorr)
abline(0,1)
data("which_pruned")
head(which_pruned)
out_trim <- OutFLANK(my_fst[which_pruned,], NumberOfSamples=39, qthreshold = 0.05, Hmin = 0.1)
str(out_trim)
head(out_trim$results)
OutFLANKResultsPlotter(out_trim, withOutliers = TRUE,
NoCorr = TRUE, Hmin = 0.1, binwidth = 0.001, Zoom =
FALSE, RightZoomFraction = 0.05, titletext = NULL)
OutFLANKResultsPlotter(out_trim , withOutliers = TRUE,
NoCorr = TRUE, Hmin = 0.1, binwidth = 0.001, Zoom =
TRUE, RightZoomFraction = 0.15, titletext = NULL)
hist(out_trim$results$pvaluesRightTail)
P1 <- pOutlierFinderChiSqNoCorr(my_fst, Fstbar = out_trim$FSTNoCorrbar,
dfInferred = out_trim$dfInferred, qthreshold = 0.05, Hmin=0.1)
head(P1)
my_out <- P1$OutlierFlag==TRUE
plot(P1$He, P1$FST, pch=19, col=rgb(0,0,0,0.1))
points(P1$He[my_out], P1$FST[my_out], col="blue")
plot(P1$LocusName[P1$He>0.1], P1$FST[P1$He>0.1],
xlab="Position", ylab="FST", col=rgb(0,0,0,0.2))
points(P1$LocusName[my_out], P1$FST[my_out], col="magenta", pch=20)
library(OutFLANK)  # outflank package
library(vcfR)
?vcfR
data("sim1a")
str(sim1a)
table(sim1a$pop)
head(sim1a$G)
sim1a$G[10:10]
sim1a$G[1:10:1:10]
sim1a$G[1:10,1:10]
sim1a$pop[1:10,1:10]
sim1a$pop[1:3]
sim1a$position[1:3]
sim1a$position[1:3, 1:3]
sim1a$position[1:10]
library(OutFLANK)  # outflank package
library(vcfR)
data("sim1a")
str(sim1a)
my_fst <- MakeDiploidFSTMat(t(sim1a$G), locusNames = sim1a$position, popNames = sim1a$pop)
head(my_fst)
plot(my_fst$He, my_fst$FST)
plot(my_fst$FST, my_fst$FSTNoCorr)
abline(0,1)
data("which_pruned")
head(which_pruned)
str(which_pruned)
out_trim <- OutFLANK(my_fst[which_pruned,], NumberOfSamples=39, qthreshold = 0.05, Hmin = 0.1)
str(out_trim)
head(out_trim$results)
plot(my_fst[which_pruned]$He, my_fst[which_pruned]$FST)
plot(my_fst[which_pruned,]$He, my_fst[which_pruned,]$FST)
#data check, we don't want extremely low H but high Fst
plot(my_fst$He, my_fst$FST)
plot(my_fst$FST[which_pruned,], my_fst$FSTNoCorr[which_pruned,])
plot(my_fst[which_pruned,]$FST, my_fst[which_pruned,]$FSTNoCorr)
out_trim <- OutFLANK(my_fst[which_pruned,], NumberOfSamples=39, qthreshold = 0.05, Hmin = 0.1)
str(out_trim)
head(out_trim$results)
OutFLANKResultsPlotter(out_trim, withOutliers = TRUE,
NoCorr = TRUE, Hmin = 0.1, binwidth = 0.001, Zoom =
FALSE, RightZoomFraction = 0.05, titletext = NULL)
OutFLANKResultsPlotter(out_trim , withOutliers = TRUE,
NoCorr = TRUE, Hmin = 0.1, binwidth = 0.001, Zoom =
TRUE, RightZoomFraction = 0.15, titletext = NULL)
hist(out_trim$results$pvaluesRightTail)
#no we have estimate of nentral mean Fst and df, we can calculate Pvalues from the whole data
P1 <- pOutlierFinderChiSqNoCorr(my_fst, Fstbar = out_trim$FSTNoCorrbar,
dfInferred = out_trim$dfInferred, qthreshold = 0.05, Hmin=0.1)
head(P1)
my_out <- P1$OutlierFlag==TRUE
plot(P1$He, P1$FST, pch=19, col=rgb(0,0,0,0.1))
points(P1$He[my_out], P1$FST[my_out], col="blue")
hist(P1$pvaluesRightTail)
hist(P1$pvalues)
plot(P1$LocusName[P1$He>0.1], P1$FST[P1$He>0.1],
xlab="Position", ylab="FST", col=rgb(0,0,0,0.2))
points(P1$LocusName[my_out], P1$FST[my_out], col="magenta", pch=20)
library(data.table)
H_all<-fread("https://raw.githubusercontent.com/adnguyen/2017_Ecological_Genomics/master/data/2017-03-20_popgenomics_part3/H_AlleleFreqs.frq?token=AEcFit8v6R38egNl4eIPZSKjoL-K7OS9ks5Y2Sg4wA%3D%3D",header=TRUE)
library('curl')
install.packages('curl')
library('curl')
detach("package:curl", unload=TRUE)
install.packages('yaml')
library(data.table)
H_all<-fread("https://raw.githubusercontent.com/adnguyen/2017_Ecological_Genomics/master/data/2017-03-20_popgenomics_part3/H_AlleleFreqs.frq?token=AEcFit8v6R38egNl4eIPZSKjoL-K7OS9ks5Y2Sg4wA%3D%3D",header=TRUE)
library("curl", lib.loc="~/R/win-library/3.4")
library("yaml", lib.loc="~/R/win-library/3.4")
H_all<-fread("https://raw.githubusercontent.com/adnguyen/2017_Ecological_Genomics/master/data/2017-03-20_popgenomics_part3/H_AlleleFreqs.frq?token=AEcFit8v6R38egNl4eIPZSKjoL-K7OS9ks5Y2Sg4wA%3D%3D",header=TRUE)
install.packages('yaml')
install.packages("yaml")
install.packages('yaml')
install.packages("yaml")
install.packages('curl')
library(data.table)
H_all<-fread("https://raw.githubusercontent.com/adnguyen/2017_Ecological_Genomics/master/data/2017-03-20_popgenomics_part3/H_AlleleFreqs.frq?token=AEcFit8v6R38egNl4eIPZSKjoL-K7OS9ks5Y2Sg4wA%3D%3D",header=TRUE)
?fread
S_all<-fread("https://raw.githubusercontent.com/adnguyen/2017_Ecological_Genomics/master/data/2017-03-20_popgenomics_part3/S_AlleleFreqs.frq?token=AEcFiuViD3MRkBng1Ks8TpfhwPtvQm5Uks5Y2ShSwA%3D%3D",header=TRUE)
H_all<-fread("https://raw.githubusercontent.com/adnguyen/2017_Ecological_Genomics/master/data/2017-03-20_popgenomics_part3/H_AlleleFreqs.frq?token=AEcFit8v6R38egNl4eIPZSKjoL-K7OS9ks5Y2Sg4wA%3D%3D",header=TRUE)
S_all<-fread("https://raw.githubusercontent.com/adnguyen/2017_Ecological_Genomics/master/data/2017-03-20_popgenomics_part3/S_AlleleFreqs.frq?token=AEcFiuViD3MRkBng1Ks8TpfhwPtvQm5Uks5Y2ShSwA%3D%3D",header=TRUE)
fst<-fread("https://raw.githubusercontent.com/adnguyen/2017_Ecological_Genomics/master/data/2017-03-20_popgenomics_part3/HvS_Fst.weir.fst?token=AEcFirmZh4UWmNCQJ0tWCqqicvq4F298ks5Y2SbJwA%3D%3D")
library(RCurl)
myfile <- getURL("https://raw.githubusercontent.com/adnguyen/2017_Ecological_Genomics/master/data/2017-03-20_popgenomics_part3/H_AlleleFreqs.frq?token=AEcFit8v6R38egNl4eIPZSKjoL-K7OS9ks5Y2Sg4wA%3D%3D", ssl.verifyhost=FALSE, ssl.verifypeer=FALSE)
myfile
version
mydat<-c(2.23, 3.45, 1.87, 2.11, 7.33, 18.34, 19.23)
mean(mydat)
for(i in 1:25){
a<-i*i
sum(a)
}
#'2.for loop
for(i in 1:25){
a<-i*i
b<-sum(a)
b
}
#'2.for loop
for(i in 1:25){
a<-i*i
b<-sum(a)
print(b)
}
sum(mydat)
#'2.for loop
for(i in 1:25){
a<-i*i
b<-sum(a)
}
b
25*25
a
#'2.for loop
en<-c(1:25)
for(i in en){
a<-i*i
b<-sum(a)
}
b
a
for(i in en){
a<-c(i*i)
b<-sum(a)
}
a
for(i in 1:25){
a<-numeric(25)
a<-c(i*i)
b<-sum(a)
}
a
b
for(i in 1:25){
a<-numeric(25)
a<-i*i
b<-sum(a)
}
a
b
a<-numeric(25)
for(i in 1:25){
a<-i*i
b<-sum(a)
}
a
b
for(i in 1:25){
a<-sum(i*i)
}
a
a<-0
for(i in 1:25){
a<-sum(i*i)
}
a
for(i in 1:25){
a[i]<-sum(i*i)
}
a
for(i in 1:25){
a[i]<-sum(i*i)
b<-sum(a)
b
}
for(i in 1:25){
a[i]<-sum(i*i)
b<-sum(a)
print(b)
}
for(i in 1:25){
a[i]<-sum(i*i)
b<-sum(a)
}
b
#'2. cars
cars
class(cars)
nrow(cars)
name(cars[,2])
names(cars[,2])
cars[,2]
colnames(cars[,2])
names(cars)
mean(cars[,2])
?which
which(cars$dist==85)
tail(cars)
library(vcfR)
setwd("~/Escape excel/Data")
#'importing xls file
#'
#'1. Save file as csv
#'2. Read csv file
p30<-read.csv("p30.csv")
p30
p30[-c(1:24),]
p30.1<-p30[-c(1:24),]
View(p30.1)
row.names(p30.1)
p30.2<-p30.1[,-1]
View(p30.2)
row.names(p30.2)<-p30.1[1,]
rownames(p30.2)<-p30.1[1,]
length(p30.1[1,])
length(p30.2[1,])
p30
